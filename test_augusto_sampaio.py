#!/usr/bin/env python3
"""
Test script for Augusto Sampaio's Lattes CV
Tests the enhanced project extraction capabilities
"""

import sys
import sqlite3
from main import CNPqScraper

def test_augusto_sampaio():
    """Test with Augusto Sampaio's specific CNPq ID"""
    
    # Augusto's CNPq ID from the example
    cnpq_id = "K4787057H4"  # From the curl example provided
    
    print("üß™ Testing Enhanced CNPq Scraper with Augusto Sampaio's Profile")
    print("=" * 70)
    print(f"üìã CNPq ID: {cnpq_id}")
    print(f"üîó Lattes URL: http://lattes.cnpq.br/{cnpq_id}")
    print()
    
    # Initialize scraper
    scraper = CNPqScraper(max_workers=1)
    
    try:
        # Test connection first
        print("üîå Testing connection...")
        if not scraper.test_connection():
            print("‚ùå Connection failed!")
            return False
        
        print("‚úÖ Connection successful!")
        print()
        
        # Get researcher details
        print("üì• Fetching researcher details...")
        details = scraper.get_researcher_details(cnpq_id)
        
        if not details:
            print("‚ùå Failed to fetch details!")
            return False
        
        print("‚úÖ Details fetched successfully!")
        print()
        
        # Display extracted information
        print("üìä EXTRACTED INFORMATION:")
        print("-" * 50)
        
        print(f"1. Nome do pesquisador: {details.get('name', 'N/A')}")
        print(f"2. Data da √∫ltima atualiza√ß√£o: {details.get('last_update_date', 'N/A')}")
        print(f"   Institui√ß√£o: {details.get('institution', 'N/A')}")
        print(f"   √Årea: {details.get('area', 'N/A')}")
        print()
        
        projects = details.get('projects', [])
        print(f"3. Projetos encontrados: {len(projects)}")
        print()
        
        if not projects:
            print("‚ö†Ô∏è Nenhum projeto encontrado!")
            print("   Isso pode indicar que:")
            print("   - O reCaptcha n√£o foi quebrado corretamente")
            print("   - A estrutura HTML mudou")
            print("   - √â necess√°rio ajustar os padr√µes de parsing")
            print()
            
            # Debug: save the HTML content for analysis
            print("üíæ Salvando HTML para an√°lise...")
            
            # Try to get the raw HTML for debugging
            try:
                debug_details = scraper.get_researcher_details(cnpq_id)
                # This will generate debug files if captcha is encountered
                
                # Also try to get the preview page directly for analysis
                preview_url = f"{scraper.base_url}/preview.do"
                preview_params = {
                    'metodo': 'apresentar',
                    'id': cnpq_id
                }
                
                preview_response = scraper.session.get(preview_url, params=preview_params)
                
                with open('debug_preview_raw.html', 'w', encoding='utf-8') as f:
                    f.write(preview_response.text)
                print("   Arquivo salvo: debug_preview_raw.html")
                
                # Try direct Lattes URL too
                lattes_url = f"http://lattes.cnpq.br/{cnpq_id}"
                try:
                    lattes_response = scraper.session.get(lattes_url)
                    with open('debug_lattes_direct.html', 'w', encoding='utf-8') as f:
                        f.write(lattes_response.text)
                    print("   Arquivo salvo: debug_lattes_direct.html")
                except Exception as e:
                    print(f"   Erro ao acessar Lattes direto: {e}")
                
                # Check what's in the HTML
                html_preview = preview_response.text[:1000].lower()
                if 'captcha' in html_preview or 'c√≥digo de seguran√ßa' in html_preview:
                    print("   ‚ö†Ô∏è Confirmado: p√°gina de captcha detectada")
                    print("   üìù Conte√∫do HTML cont√©m indicadores de captcha")
                    
                    # Look for captcha elements
                    if 'g-recaptcha' in html_preview:
                        print("   ü§ñ Google reCaptcha detectado")
                    if 'recaptcha' in html_preview:
                        print("   üîí Sistema reCaptcha ativo")
                else:
                    print("   ‚ùì HTML n√£o cont√©m indicadores √≥bvios de captcha")
                    print(f"   üìÑ Preview do conte√∫do: {html_preview[:200]}...")
                
            except Exception as debug_error:
                print(f"   ‚ùå Erro ao salvar debug: {debug_error}")
            
            print()
            print("üîß POSS√çVEIS SOLU√á√ïES:")
            print("   1. ü§ñ Implementar quebra autom√°tica de reCaptcha (complexo)")
            print("   2. üï∞Ô∏è Aguardar e tentar novamente (captcha pode ser tempor√°rio)")
            print("   3. üîÑ Usar diferentes IPs/proxies para evitar captcha")
            print("   4. üìû Contato com CNPq para acesso program√°tico")
            print("   5. üë§ Resolu√ß√£o manual do captcha e extra√ß√£o do token")
            print()
            print("üß† AN√ÅLISE T√âCNICA:")
            print("   - O CNPq implementou prote√ß√£o reCaptcha recentemente")
            print("   - Tokens s√£o gerados dinamicamente por JavaScript")
            print("   - Necess√°rio resolver captcha para obter token v√°lido")
            print("   - Poss√≠vel implementar selenium + 2captcha/anti-captcha services")
            
        else:
            # Display projects in the requested format
            for i, project in enumerate(projects, 1):
                print(f"PROJETO {i}:")
                print(f"3a. T√≠tulo: {project.get('title', 'N/A')}")
                print(f"3b. Per√≠odo: {project.get('start_date', 'N/A')} - {project.get('end_date', 'N/A')}")
                
                description = project.get('description', 'N/A')
                if len(description) > 100:
                    description = description[:100] + "..."
                print(f"3c. Resumo: {description}")
                
                print(f"3d. Fontes de financiamento: {project.get('funding_sources', 'N/A')}")
                print(f"3e. Coordenador: {project.get('coordinator_name', 'N/A')}")
                print(f"3f. Coopera√ß√£o com ind√∫stria: {project.get('industry_cooperation', '-')}")
                print(f"3g. Conceitos de M√©todos Formais: {project.get('formal_methods_concepts', '-')}")
                print(f"3h. Ferramentas de M√©todos Formais: {project.get('formal_methods_tools', '-')}")
                print(f"    Relacionado a M√©todos Formais: {'Sim' if project.get('is_formal_methods_related') else 'N√£o'}")
                print()
        
        # Save to database for testing
        print("üíæ Salvando no banco de dados...")
        researcher_data = {
            'cnpq_id': cnpq_id,
            'name': details.get('name'),
            'institution': details.get('institution'),
            'area': details.get('area'),
            'city': details.get('city'),
            'state': details.get('state'),
            'country': details.get('country'),
            'last_update_date': details.get('last_update_date'),
            'search_term': 'test_augusto_sampaio',
            'projects': projects
        }
        
        scraper.save_researcher(researcher_data)
        print("‚úÖ Dados salvos no banco!")
        print()
        
        # Verify database contents
        print("üîç Verificando banco de dados...")
        conn = sqlite3.connect('cnpq_researchers.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM researchers WHERE cnpq_id = ?", (cnpq_id,))
        researcher_row = cursor.fetchone()
        
        cursor.execute("SELECT COUNT(*) FROM projects WHERE cnpq_id = ?", (cnpq_id,))
        project_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM projects WHERE cnpq_id = ? AND is_formal_methods_related = 1", (cnpq_id,))
        fm_project_count = cursor.fetchone()[0]
        
        conn.close()
        
        print(f"   Pesquisador no DB: {'‚úÖ' if researcher_row else '‚ùå'}")
        print(f"   Projetos no DB: {project_count}")
        print(f"   Projetos FM no DB: {fm_project_count}")
        print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        scraper.close()

def main():
    """Main test function"""
    print("üß™ TESTE ESPEC√çFICO - AUGUSTO SAMPAIO")
    print("Verificando se o scraper consegue extrair projetos corretamente")
    print()
    
    success = test_augusto_sampaio()
    
    print("=" * 70)
    if success:
        print("üéâ TESTE CONCLU√çDO!")
        print("Verifique os resultados acima para avaliar a qualidade da extra√ß√£o.")
    else:
        print("‚ùå TESTE FALHOU!")
        print("Verifique os logs de erro acima.")
    
    print()
    print("üí° Pr√≥ximos passos:")
    print("   - Se nenhum projeto foi encontrado, pode ser necess√°rio quebrar o reCaptcha")
    print("   - Se alguns projetos foram encontrados mas est√£o incompletos, ajustar parsing")
    print("   - Se tudo funcionou, pode executar o scraper completo")

if __name__ == "__main__":
    main() 